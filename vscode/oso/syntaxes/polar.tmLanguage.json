{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "polar",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#rule"
    },
    {
      "include": "#rule-type"
    },
    {
      "include": "#inline-query"
    },
    {
      "include": "#resource-block"
    }
  ],
  "repository": {
    "comment": {
      "name": "comment.line.number-sign",
      "match": "#.*"
    },
    "rule": {
      "name": "meta.rule",
      "patterns": [
        {
          "include": "#rule-functor"
        },
        {
          "begin": "\\bif\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.if"
            }
          },
          "end": ";",
          "patterns": [
            {
              "include": "#term"
            }
          ]
        },
        {
          "match": ";"
        }
      ]
    },
    "rule-type": {
      "name": "meta.rule-type",
      "begin": "\\btype\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.other.type-decl"
        }
      },
      "end": ";",
      "patterns": [
        {
          "include": "#rule-functor"
        }
      ]
    },
    "inline-query": {
      "name": "meta.inline-query",
      "begin": "\\?=",
      "end": ";",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "patterns": [
        {
          "include": "#term"
        }
      ]
    },
    "resource-block": {
      "name": "meta.resource-block",
      "begin": "(resource|actor)\\s*([a-zA-Z][a-zA-Z0-9:]*)\\s*\\{",
      "beginCaptures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "entity.name.type"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "name": "punctuation.separator.sequence.declarations",
          "match": ";"
        },
        {
          "name": "meta.relation-declaration",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#specializer"
            },
            {
              "include": "#comment"
            },
            {
              "name": "punctuation.separator.sequence.dict",
              "match": ","
            }
          ]
        },
        {
          "include": "#term"
        }
      ]
    },
    "term": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#number"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#operator"
        },
        {
          "name": "meta.bracket.list",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "include": "#term"
            },
            {
              "name": "punctuation.separator.sequence.list",
              "match": ","
            }
          ]
        },
        {
          "name": "meta.bracket.dict",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#term"
            },
            {
              "name": "punctuation.separator.sequence.dict",
              "match": ","
            }
          ]
        },
        {
          "name": "meta.parens",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#term"
            }
          ]
        }
      ]
    },
    "string": {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\."
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.float",
          "match": "\\b[+-]?\\d+(?:(\\.)\\d+(?:e[+-]?\\d+)?|(?:e[+-]?\\d+))\\b"
        },
        {
          "name": "constant.numeric.integer",
          "match": "\\b(\\+|\\-)[\\d]+\\b"
        },
        {
          "name": "constant.numeric.natural",
          "match": "\\b[\\d]+\\b"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "match": "\\b(cut|or|debug|print|in|forall|if|and|of|not|matches|type|on)\\b",
          "name": "constant.character"
        }
      ]
    },
    "operator": {
      "match": "(\\+|-|\\*|\\/|<|>|=|!)",
      "captures": {
        "1": {
          "name": "keyword.control"
        }
      }
    },
    "rule-functor": {
      "begin": "([a-zA-Z][a-zA-Z0-9-_]*)\\(",
      "beginCaptures": {
        "1": {
          "name": "support.function.rule"
        }
      },
      "end": "\\)",
      "patterns": [
        {
          "include": "#specializer"
        },
        {
          "name": "punctuation.separator.sequence.list",
          "match": ","
        },
        {
          "include": "#term"
        }
      ]
    },
    "specializer": {
      "match": "[a-zA-Z_][a-zA-Z0-9-_]*\\s*:\\s*([a-zA-Z][a-zA-Z0-9:-_]*)",
      "captures": {
        "1": {
          "name": "entity.name.type.resource"
        }
      }
    }
  },
  "scopeName": "source.polar"
}