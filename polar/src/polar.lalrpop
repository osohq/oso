// @NOTE(steve): This was pretty easy to get running but the error messages you get when things don't parse aren't as
// good as what we want to expose to polar users. Either we do a lot of mapping or we replace this with a hand rolled
// parser later.

use std::str::FromStr;
use std::collections::{HashMap, BTreeMap};

use crate::lexer::{self, Token};
use crate::parser::Line;
use crate::error;
use crate::types::*;

use lalrpop_util::ParseError;

grammar(src_id: u64);

extern {
    type Location = usize;
    type Error = error::ParseError;

    enum Token {
        "Integer" => lexer::Token::Integer(<i64>),
        "Float" => lexer::Token::Float(<f64>),
        "String" => lexer::Token::String(<String>),
        "Boolean" => lexer::Token::Boolean(<bool>),
        "Symbol" => lexer::Token::Symbol(<Symbol>),
        ":" => lexer::Token::Colon,     // :
        "," => lexer::Token::Comma,     // ,
        "[" => lexer::Token::LB,        // [
        "]" => lexer::Token::RB,        // ]
        "(" => lexer::Token::LP,        // (
        ")" => lexer::Token::RP,        // )
        "{" => lexer::Token::LCB,       // {
        "}" => lexer::Token::RCB,       // }
        "." => lexer::Token::Dot,       // .
        "new" => lexer::Token::New,     // new
        "!" => lexer::Token::Bang,       // !
        "*" => lexer::Token::Mul,       // *
        "/" => lexer::Token::Div,       // /
        "+" => lexer::Token::Add,       // +
        "-" => lexer::Token::Sub,       // -
        "==" => lexer::Token::Eq,       // ==
        "!=" => lexer::Token::Neq,      // !=
        "<=" => lexer::Token::Leq,      // <=
        ">=" => lexer::Token::Geq,      // >=
        "<" => lexer::Token::Lt,        // <
        ">" => lexer::Token::Gt,        // >
        "=" => lexer::Token::Unify,     // =
        "|" => lexer::Token::Pipe,      // |
        ";" => lexer::Token::SemiColon, // ;
        ":=" => lexer::Token::Define,   // :=
        "?=" => lexer::Token::Query,    // ?=
        "cut" => lexer::Token::Cut,
        "debug" => lexer::Token::Debug,
        "print" => lexer::Token::Print,
        "in" => lexer::Token::In,       // in
        "forall" => lexer::Token::ForAll,     // forall
        "if" => lexer::Token::If,       // if
        "and" => lexer::Token::And,     // and
        "or" => lexer::Token::Or,       // or
        "not" => lexer::Token::Not,       // not
        "matches" => lexer::Token::Matches,   // matches
    }
}

pub Number: Term = {
    <start:@L> <i:"Integer"> => {
        Term::new_from_parser(src_id, start, Value::Number(i.into()))
    },
    <start:@L> <f:"Float"> => {
        Term::new_from_parser(src_id, start, Value::Number(f.into()))
    },
    <start:@L> "+" <i:"Integer"> => {
        Term::new_from_parser(src_id, start, Value::Number(i.into()))
    },
    <start:@L> "+" <f:"Float"> => {
        Term::new_from_parser(src_id, start, Value::Number(f.into()))
    },
    <start:@L> "-" <i:"Integer"> => {
        Term::new_from_parser(src_id, start, Value::Number((-i).into()))
    },
    <start:@L> "-" <f:"Float"> => {
        Term::new_from_parser(src_id, start, Value::Number((-f).into()))
    }
};


pub PolarString: Term = <start:@L> <s:"String"> => {
    Term::new_from_parser(src_id, start, Value::String(s))
};

pub Boolean: Term = <start:@L> <b:"Boolean"> => {
    Term::new_from_parser(src_id, start, Value::Boolean(b))
};

Name: Symbol = <s:"Symbol"> => s;

pub Symbol: Term  = <start:@L> <n:Name> => {
    Term::new_from_parser(src_id, start, Value::Variable(n))
};

Fields<T>: BTreeMap<Symbol, Term> = {
    <name:Name> ":" <value:T> => {
        let mut fields = BTreeMap::new();
        fields.insert(name, value);
        fields
    },
    <name:Name> ":" <value:T> "," <mut fields:Fields<T>> => {
        fields.insert(name, value);
        fields
    }
};

Object<T>: BTreeMap<Symbol, Term> = {
    "{" <fields:Fields<T>> "}" => {
        fields
    },
    "{" "}" => {
        BTreeMap::new()
    }
};

Dictionary<T>: Term = <start:@L> <fields:Object<T>> => {
    let dict = Dictionary{fields};
    Term::new_from_parser(src_id, start, Value::Dictionary(dict))
};

DictionaryTerm: Term = <Dictionary<Exp5<"Term">>> => <>;
// Pattern dictionaries cannot contain any operators.
DictionaryPattern: Term = <Dictionary<Exp9<"Pattern">>> => <>;

InstanceLiteral<T>: Term = <start:@L> <tag:Name> <fields:Object<T>> => {
    let instance = InstanceLiteral{tag, fields: Dictionary{fields}};
    Term::new_from_parser(src_id, start, Value::InstanceLiteral(instance))
};

pub InstanceLiteralTerm: Term = <InstanceLiteral<Exp5<"Term">>> => <>;
pub InstanceLiteralPattern: Term = <InstanceLiteral<Exp9<"Pattern">>> => <>;

// Either a *rest variable, or an ordinary term.
RestVar<T>: Term = {
    <start:@L> "*" <rest:Name> => {
        Term::new_from_parser(src_id, start, Value::RestVariable(rest))
    },
    <Term> if T == "Term" => <>,
    <Pattern> if T == "Pattern" => <>
};

pub Pattern: Term = {
    <term:InstanceLiteralPattern> => Pattern::term_as_pattern(&term),
    <term:DictionaryPattern> => Pattern::term_as_pattern(&term),
    <term:Number> => term,
    <term:PolarString> => term,
    <term:Boolean> => term,
    <term:Symbol> => term,
    <start:@L> "[" <terms:(<Pattern> ",")*> <term:RestVar<"Pattern">?> "]" => {
        match term {
            Some(term) => Term::new_from_parser(src_id, start, Value::List(vec![term])),
            None => Term::new_from_parser(src_id, start, Value::List(terms))
        }
    }
};

pub Term: Term = {
    <term:Number> => term,
    <term:PolarString> => term,
    <term:Boolean> => term,
    <term:Symbol> => term,
    <term:DictionaryTerm> => term,
    <start:@L> <op:BuiltinOperation> => Term::new_from_parser(src_id, start, Value::Expression(op)),
    <start:@L> <op:RewrittenOperation> => Term::new_from_parser(src_id, start, Value::Expression(op)),
    <start:@L> <pred:Predicate> => Term::new_from_parser(src_id, start, Value::Call(pred)),
    <start:@L> "[" <mut terms:(<Term> ",")*> <term:RestVar<"Term">?> "]" => {
        match term {
            Some(term) => {
                terms.push(term);
                Term::new_from_parser(src_id, start, Value::List(terms))
            },
            None => Term::new_from_parser(src_id, start, Value::List(terms))
        }
    }
};

BuiltinOperator: Operator = {
    "debug" => Operator::Debug,
    "print" => Operator::Print,
};

pub BuiltinOperation: Operation = {
    <op:BuiltinOperator> "(" <mut args:(<Exp2<"Term">> ",")*> <arg:Exp2<"Term">?> ")" => {
        match arg {
            Some(arg) => args.push(arg),
            None => ()
        };
        Operation{operator: op, args: args}
    },
};

RewritableOperator: Operator = {
    "." => Operator::Dot,
    "new" => Operator::New,
    "in" => Operator::In,
};

pub RewrittenOperation: Operation = {
    <op:RewritableOperator> "(" <mut args:(<TermExp> ",")*> <arg:TermExp?> ")" => {
        match arg {
            Some(arg) => args.push(arg),
            None => ()
        };
        Operation{operator: op, args: args}
    },
};

pub Predicate: Predicate = {
    <name:Name> "(" <mut args:(<TermExp> ",")*> <arg:TermExp?> ")" => {
        match arg {
            Some(arg) => args.push(arg),
            None => ()
        };
        Predicate{name, args}
    }
};

Exp11<T>: Term = {
    <term:Term> if T == "Term" => term,
    <term:Pattern> if T == "Pattern" => term,
    "(" <exp:Exp<T>> ")" => exp // seems sorta impossible to support parrens for expressions and list literals.
}

Exp10<T>: Term = {
    // A pattern cannot contain a new operator
    <new:New> if T == "Term" => new,
    <start:@L> "cut" => {
        let args = vec![];
        let op = Operation{operator: Operator::Cut, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> "forall" "(" <arg1:Exp2<"Term">> "," <arg2:Exp2<"Term">> ")" => {
        let args = vec![arg1, arg2];
        let op = Operation{operator: Operator::ForAll, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <exp11:Exp11<T>> => exp11,
}

New: Term = <start:@L> "new" <literal:InstanceLiteralTerm> => {
    let args = vec![literal];
    let op = Operation{operator: Operator::New, args};
    Term::new_from_parser(src_id, start, Value::Expression(op))
};

Callable<T>: Term = {
    <DictionaryTerm> if T == "Term" => <>,
    <DictionaryPattern> if T == "Pattern" => <>,
    <Symbol> => <>,
    <DotOp<T>> => <>,
    // A pattern cannot contain a new operator.
    <New> if T == "Term" => <>,
};

DotOp<T>: Term = {
    <start:@L> <head:Callable<T>> "." <call_loc:@L> <mut call:Predicate> => {
        let call_term = Term::new_from_parser(src_id, call_loc, Value::Call(call));
        let args = vec![head, call_term];
        let op = Operation{operator: Operator::Dot, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <head:Callable<T>> "." <call_loc:@L> <name:Name> => {
        let call = Predicate{name, args: vec![]};
        let call_term = Term::new_from_parser(src_id, call_loc, Value::Call(call));
        let args = vec![head, call_term];
        let op = Operation{operator: Operator::Dot, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <head:Callable<T>> "." <call_loc:@L> "(" <name:Name> ")" => {
        let call_term = Term::new_from_parser(src_id, call_loc, Value::Variable(name));
        let args = vec![head, call_term];
        let op = Operation{operator: Operator::Dot, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    }
}

// .
Exp9<T>: Term = {
    <dot_op:DotOp<T>> => dot_op,
    <exp10:Exp10<T>> => exp10
};

Matches = {"matches"};

// in matches
Exp8<T>: Term = {
    <start:@L> <left:Exp8<T>> "in" <right:Exp9<T>> => {
        let args = vec![left, right];
        let op = Operation{operator: Operator::In, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    // Symbols on the RHS are treated as class names, just like in a specializers
    <start:@L> <left:Exp8<T>> Matches <right:Pattern> => {
        let right = if let Value::Variable(ref sym) = right.value() {
            right.clone_with_value(Value::Pattern(Pattern::Instance(InstanceLiteral {
                tag: sym.clone(),
                fields: Dictionary::new()
            })))
        } else {
            Pattern::term_as_pattern(&right)
        };
        let args = vec![left, right];
        let op = Operation{operator: Operator::Isa, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <exp9:Exp9<T>> => exp9
}

// * /
Exp7<T>: Term = {
    <start:@L> <exp7:Exp7<T>> "*" <exp8:Exp8<T>> => {
        let args = vec![exp7, exp8];
        let op = Operation{operator: Operator::Mul, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <exp7:Exp7<T>> "/" <exp8:Exp8<T>> => {
        let args = vec![exp7, exp8];
        let op = Operation{operator: Operator::Div, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <exp8:Exp8<T>> => exp8
}

// + -
Exp6<T>: Term = {
    <start:@L> <exp6:Exp6<T>> "+" <exp7:Exp7<T>> => {
        let args = vec![exp6, exp7];
        let op = Operation{operator: Operator::Add, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <exp6:Exp6<T>> "-" <exp7:Exp7<T>> => {
        let args = vec![exp6, exp7];
        let op = Operation{operator: Operator::Sub, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <exp7:Exp7<T>> => exp7
}

// == != <= < >= >
Exp5<T>: Term = {
    <start:@L> <exp5:Exp5<T>> "==" <exp6:Exp6<T>> => {
        let args = vec![exp5, exp6];
        let op = Operation{operator: Operator::Eq, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <exp5:Exp5<T>> "!=" <exp6:Exp6<T>> => {
        let args = vec![exp5, exp6];
        let op = Operation{operator: Operator::Neq, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <exp5:Exp5<T>> "<=" <exp6:Exp6<T>> => {
        let args = vec![exp5, exp6];
        let op = Operation{operator: Operator::Leq, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <exp5:Exp5<T>> ">=" <exp6:Exp6<T>> => {
        let args = vec![exp5, exp6];
        let op = Operation{operator: Operator::Geq, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <exp5:Exp5<T>> "<" <exp6:Exp6<T>> => {
        let args = vec![exp5, exp6];
        let op = Operation{operator: Operator::Lt, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <start:@L> <exp5:Exp5<T>> ">" <exp6:Exp6<T>> => {
        let args = vec![exp5, exp6];
        let op = Operation{operator: Operator::Gt, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <exp6:Exp6<T>> => exp6
}

// =
Exp4<T>: Term = {
    <start:@L> <exp4:Exp4<T>> "=" <exp5:Exp5<T>> => {
        let args = vec![exp4, exp5];
        let op = Operation{operator: Operator::Unify, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
     <exp5:Exp5<T>> => exp5
 }

 // !
Not = {"not"};
Exp3<T>: Term = {
    <start:@L> Not <exp4:Exp4<T>> => {
        let args = vec![exp4];
        let op = Operation{operator: Operator::Not, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    // TODO (dhatch): Maybe a different type here
    <exp4:Exp4<T>> => exp4
}

Or = {"or"};
Exp2<T>: Term = {
    <start:@L> <head:Exp3<T>> Or <mut tail:Exp2<T>> => {
        let args = match &mut tail.value() {
            Value::Expression(Operation{operator: Operator::Or, args: tail_args}) => {
                let mut args = vec![head];
                args.append(&mut tail_args.clone());
                args
            }
            _ => {
                vec![head, tail]
            }
        };
        let op = Operation{operator: Operator::Or, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <exp3:Exp3<T>> => exp3
}

And = {"and"};
Exp1<T>: Term = {
    <start:@L> <head:Exp2<T>> And <mut tail:Exp1<T>> => {
        let args = match &mut tail.value() {
            Value::Expression(Operation{operator: Operator::And, args: tail_args}) => {
                let mut args = vec![head];
                args.append(&mut tail_args.clone());
                args
            }
            _ => {
                vec![head, tail]
            }
        };
        let op = Operation{operator: Operator::And, args};
        Term::new_from_parser(src_id, start, Value::Expression(op))
    },
    <exp2:Exp2<T>> => exp2
}

// All ExpN & Exp productions are macros with one parameter. The parameter is the
// *string* "Term" or "Pattern" which controls whether the expression is over terms
// or patterns.  (It is a string since we need to conditionally
// change the expression precedence allowed in patterns versus terms depending
// on the parameter type, and LALRPOP does not allow conditional macros on anything
// other than a string.
Exp<T>: Term = {
    <exp1:Exp1<T>> => exp1
}

Parameter: Parameter = {
    <param:Exp6<"Term">> => {
        Parameter{parameter: Some(param), specializer: None}
    },
    // parenthesized specializers do not have symbol translation to class names applied
    <start:@L> <name:Name> ":" "(" <specializer:Pattern> ")" => {
        let mut name = Term::new_from_parser(src_id, start, Value::Variable(name));
        Parameter {
            parameter: Some(name),
            specializer: Some(specializer),
        }
    },
    <start:@L> <name:Name> ":" <specializer:Pattern> => {
        let mut name = Term::new_from_parser(src_id, start, Value::Variable(name));
        let offset = specializer.offset();
        if let Value::Variable(class_name) = specializer.value() {
            let fields = BTreeMap::new();
            let instance_literal = InstanceLiteral{tag: class_name.clone(), fields: Dictionary{fields}};
            Parameter {
                parameter: Some(name),
                specializer: Some(Term::new_from_parser(src_id, offset, Value::Pattern(Pattern::Instance(instance_literal)))),
            }
        } else {
            Parameter{parameter: Some(name), specializer: Some(specializer)}
        }
    },
};

pub TermExp: Term = {
    <Exp<"Term">> => <>
};

pub PatternExp: Term = {
    <Exp9<"Pattern">> => <>
};

ParameterList: Vec<Parameter> = {
    <param:Parameter> => vec![param],
    <mut list:ParameterList> "," <param:Parameter> => {
        list.push(param);
        list
    },
};

RuleHead: (Symbol, Vec<Parameter>) = {
    <name:Name> "(" ")" => {
        (name, vec![])
    },
    <name:Name> "(" <params:ParameterList> ")" => {
        (name, params)
    }
};

Define = {":=", "if"};

pub Rule: Rule = {
    <head:RuleHead> <start:@L> ";" => {
        let (name, params) = head;
        let op = Operation{operator: Operator::And, args: vec![]};
        let body = Term::new_from_parser(src_id, start, Value::Expression(op));
        Rule{name, params, body}
    },
    <head:RuleHead> Define <body:TermExp> ";" => {
        let (name, params) = head;
        let body = match body.value() {
            Value::Expression(Operation{operator: Operator::And, ..}) => {
                body
            },
            _ => {
                let offset = body.offset();
                let op = Operation{operator: Operator::And, args: vec![body]};
                Term::new_from_parser(src_id, offset, Value::Expression(op))
            }
        };
        Rule{name, params, body}
    }
}

pub Rules: Vec<Rule> = <Rule*>;

Line: Line = {
    <Rule> => Line::Rule(<>),
    "?=" <TermExp> ";" => Line::Query(<>),
}

pub Lines: Vec<Line> = <Line*>;
