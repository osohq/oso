matrix:
  # All content files (no data/data.md files)
  - name: content
    sources:
      - ../content/**/*.md|!../content/**/data/data.md
    dictionary:
      wordlists:
        - allowed_words.txt
      output: content.dic
    pipeline:
      - pyspelling.filters.url:

      # HTML comments
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            - open: '(?s)<!--'
              close: '-->'

      # Ignore shortcodes first
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            # TODO(gj): If I make this more generic than literal 'code' then it
            # unfortunately matches from single shortcodes that don't have a
            # closing dual (e.g., 'literalInclude') to the end of the file. If
            # I move it down below the single shortcode matches, then they get
            # processed first and by the time we're looking for dual shortcode
            # tags they've already been stripped out.
            #
            # {{< code >}} shortcodes
            - open: '(?s)^ *{{< *(?P<name>code).*>}} *$'
              close: '^ *{{< */(?P=name) *>}} *$'
            # Shortcode (processed)
            - open: '(?s){{%'
              close: '%}}'
            # Shortcode (raw)
            - open: '(?s){{<'
              close: '>}}'

      # Ignore YAML frontmatter
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            # Frontmatter
            - open: '(?s)(?P<open> *-{3,})'
              close: '^(?P=open)$'

      # Ignore inline and fenced code snippets
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            - open: '(?s)(?P<open>`+)'
              close: '(?P=open)'

      # Markdown links
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            # [text](link)
            - open: '(?s)\]\('
              close: '\)'
            # [text][link]
            - open: '(?s)\]\['
              close: '\]'
            # [text]: link
            - open: '^ *\[.*\]:'
              close: '$'

  # All data/data.md files
  - name: data
    sources:
      - ../content/**/data/data.md
    dictionary:
      wordlists:
        - allowed_words.txt
      output: data.dic
    pipeline:
      - pyspelling.filters.url:

      # HTML comments
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            - open: '(?s)<!--'
              close: '-->'

      # YAML values that case-insensitively match their key. E.g.,
      # `submitted_by: submitted_by`
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            - open: '(?i)^(?P<key>[\w\d]+): (?P=key)'
              close: '$'

      # YAML keys
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            - open: '^[\w\d]+:'
              close: ' '

      # Example file paths
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            - open: 'examples/'
              content: '([\w\d-]+/)*'
              close: '[\w\d-]+\.\w+$'

      # Ignore inline and fenced code snippets
      - pyspelling.filters.context:
          context_visible_first: true
          delimiters:
            - open: '(?s)(?P<open>`+)'
              close: '(?P=open)'
