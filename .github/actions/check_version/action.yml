name: "Check Version"
description: "Checks that the Oso version numbers all match"
runs:
  using: "composite"
  steps:
    - name: Set version env
      run: echo "oso_version=$(cat VERSION)" >> $GITHUB_ENV
      shell: bash
    - name: Check python version matches
      run: grep "__version__ = \"$oso_version\"" oso/oso.py
      shell: bash
      working-directory: languages/python/oso
    - name: Check ruby version matches
      run: grep "VERSION = '$oso_version'" lib/oso/version.rb
      shell: bash
      working-directory: languages/ruby
    - name: Check java version matches
      run: grep "<version>$oso_version</version>" pom.xml
      shell: bash
      working-directory: languages/java/oso
    - name: Check JS version matches
      run: |
        grep "\"version\": \"$oso_version\"" package.json
      shell: bash
      working-directory: languages/js
    - name: Check rust version matches
      run: |
        grep "^version = \"$oso_version\"$" oso/Cargo.toml
        grep "^version = \"$oso_version\"$" oso-derive/Cargo.toml
      shell: bash
      working-directory: languages/rust
    - name: Check polar version matches
      run: |
        grep "^version = \"$oso_version\"$" polar-core/Cargo.toml
        grep "^version = \"$oso_version\"$" polar-c-api/Cargo.toml
        grep "^version = \"$oso_version\"$" polar-wasm-api/Cargo.toml
      shell: bash
    - name: Check VS Code extension version matches
      run: |
        grep "^version = \"$oso_version\"$" polar-language-server/Cargo.toml
        # Until we come up with a better versioning strategy for the VS Code
        # extension, we only care about keeping its major version in-sync with
        # the major version of the Oso library. Note that this synchronization
        # is not totally accurate since we currently release the VS Code
        # extension more often than `polar_core` and breaking changes might
        # have been merged into `polar_core` since the last extension release.
        # E.g., if `polar_core` is on major version 0.N.0 and the next release
        # will be 0.(N+1).0 but we want to release a new extension version
        # before cutting the next `polar_core` release, the new extension
        # version should technically be 0.(N+1).0 since it will contain the
        # as-yet-unreleased breaking changes to `polar_core`.
        grep "\"version\": \"${oso_version%.*}.[[:digit:]]\+\"" vscode/oso/package.json
      shell: bash
