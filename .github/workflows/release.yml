name: Create Release
on:
  push:
   tags:
     - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  version:
    name: Compute and verify the version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set version env
        env:
          github_ref: ${{ github.ref }}
        run: echo "::set-env name=oso_version::${github_ref/refs\/tags\/v/}"
      - name: Check versions match
        run: grep "__version__ = \"$oso_version\"" oso/__init__.py
        working-directory: languages/python
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: version
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest] # Later: windows-latest

    env:
      # Skip Python 2.7 and Python 3.5
      CIBW_SKIP: "cp27-* cp35-* pp27-*"
      # 64-bit builds only
      CIBW_BUILD: "*64"
      # Used in build.py to find right files
      CIBW_ENVIRONMENT: ENV=CI

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==1.4.2

      - name: Build Rust library (Linux)
        if: runner.os == 'Linux'
        run: |
          rustup target add x86_64-unknown-linux-musl
          cargo build --target x86_64-unknown-linux-musl --release
          mkdir -p languages/python/native
          cp polar/polar.h languages/python/native/
          cp target/x86_64-unknown-linux-musl/release/libpolar.a languages/python/native/
      - name: Build Rust library (OSX)
        if: runner.os != 'Linux'
        run: |
          cargo build --release
          mkdir -p languages/python/native
          cp polar/polar.h languages/python/native/
          cp target/release/libpolar.a languages/python/native/

      - name: Build wheels
        run: |
           python -m cibuildwheel --output-dir wheelhouse
        working-directory: languages/python
      - uses: actions/upload-artifact@v2
        with:
          name: wheel
          path: languages/python/wheelhouse/*.whl
  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: "3.6"
  #     - uses: actions/checkout@v2
  #     - run: pip3 install -r requirements-dev.txt -i https://pypi.python.org/simple/
  #       working-directory: polar
  #     - run: pip3 install -e .
  #       working-directory: polar
  #     - run: pip3 install -e .
  #       working-directory: oso
  #     - run: make html
  #       working-directory: docs
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: docs
  #         path: docs/_build/html/
  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [build_wheels]
    steps:
      - name: Set version output
        id: version
        env:
          github_ref: ${{ github.ref }}
        run: echo "::set-output name=oso_version::${github_ref/refs\/tags\/v/}"
      - name: Download oso wheel from package run
        uses: actions/download-artifact@v1
        with:
          name: wheel
      - name: Zip file
        run: zip --junk-paths -r oso-python.zip wheel/
      # - name: Download docs
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: docs
      # - name: Zip docs
      #   run: zip -r oso-docs.zip docs/
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.version.outputs.oso_version }}
          release_name: Release ${{ steps.version.outputs.oso_version }}
          body: |
            Oso Release ${{ steps.version.outputs.oso_version }}
          draft: true
          prerelease: false
      
      - name: Upload Release Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./oso-python.zip
          asset_name: oso-python-${{ steps.version.outputs.oso_version }}.zip
          asset_content_type: application/zip
      # - name: Upload Release Docs
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: ./oso-docs.zip
      #     asset_name: oso-docs.zip
      #     asset_content_type: application/zip
