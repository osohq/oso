name: Publish Docs
on:
  workflow_dispatch:
    inputs:
      url:
        description: "docs s3 path (docs.oso.dev or docs-preview.oso.dev)"
      oso_version:
        description: "oso release to build docs for"
        default: "0.27.0" # oso_version
      flask_oso_version:
        description: "flask oso release to build docs for"
        default: "0.27.0" # flask_oso_version
      django_oso_version:
        description: "django oso release to build docs for"
        default: "0.27.0" # django_oso_version
      sqlalchemy_oso_version:
        description: "sqlalchemy oso release to build docs for"
        default: "0.27.0" # sqlalchemy_oso_version

# Needed to get an AWS token
permissions:
  contents: read # (default) needed for the actions/checkout task
  id-token: write # Retrieve ID token for AWS OIDC authentication

jobs:
  publish:
    name: Publish docs
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "us-east-1"
      PUBLISH_DOCS: 1
      ALGOLIA_ADMIN_API_KEY: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}
    steps:
      - uses: actions/checkout@v2

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::145452666862:role/oso-docs-github-actions-role
          role-duration-seconds: 900
          aws-region: us-east-1

      ### Setup dependencies
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.7"
      - name: Install Ruby + gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: "languages/ruby"
      - name: Install yard
        run: gem install yard
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Uncomment this when we want WASM on the docs site again
      # - name: Install Rust stable toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     profile: minimal
      #     toolchain: stable
      #
      # ### Build Rust WASM target
      # - name: Add WebAssembly target
      #   run: rustup target add wasm32-unknown-unknown
      # - name: Install wasm-pack
      #   run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      # - name: Build Rust WASM
      #   run: make wasm-build

      ### Install release version of Oso libraries
      - name: Download oso (Node.js) from release
        run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/v${{ github.event.inputs.oso_version }} | jq -r '.assets[] | select(.name == "oso-js-node-${{ github.event.inputs.oso_version }}.tgz") | .url') --output oso-js-node-${{ github.event.inputs.oso_version }}.tgz
      - name: Copy WASM types file from release archive to JS lib
        run: tar -xzf oso-js-node-${{ github.event.inputs.oso_version }}.tgz -C languages/js --strip-components=2 package/dist/src/polar_wasm_api.d.ts package/dist/src/polar_wasm_api.js package/dist/src/polar_wasm_api_bg.wasm package/dist/src/polar_wasm_api_bg.wasm.d.ts
      - name: Download oso (Python) from release
        run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/v${{ github.event.inputs.oso_version }} | jq -r '.assets[] | select(.name == "oso-python-${{ github.event.inputs.oso_version }}.zip") | .url') --output oso-python-${{ github.event.inputs.oso_version }}.zip
      - run: unzip oso-python-${{ github.event.inputs.oso_version }}.zip -d oso-python
      - name: Install oso from release
        run: pip install oso==${{ github.event.inputs.oso_version }} -f oso-python
      - name: Download flask-oso from release
        run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/flask-v${{ github.event.inputs.flask_oso_version }} | jq -r '.assets[] | select(.name == "flask-oso-python-${{ github.event.inputs.flask_oso_version }}.zip") | .url') --output flask-oso-python-${{ github.event.inputs.flask_oso_version }}.zip
      - run: unzip flask-oso-python-${{ github.event.inputs.flask_oso_version }}.zip -d flask-oso-python
      - name: Download django-oso from release
        run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/django-v${{ github.event.inputs.django_oso_version }} | jq -r '.assets[] | select(.name == "django-oso-python-${{ github.event.inputs.django_oso_version }}.zip") | .url') --output django-oso-python-${{ github.event.inputs.django_oso_version }}.zip
      - run: unzip django-oso-python-${{ github.event.inputs.django_oso_version }}.zip -d django-oso-python
      - name: Install flask-oso from release
        run: pip install flask_oso==${{ github.event.inputs.flask_oso_version }} -f flask-oso-python
      - name: Install django-oso from release
        run: pip install django_oso==${{ github.event.inputs.django_oso_version }} -f django-oso-python
      - name: Install sqlalchemy-oso from release
        run: pip install sqlalchemy_oso[flask]==${{ github.event.inputs.sqlalchemy_oso_version }} -f sqlalchemy-oso-python

      ### Build docs
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "0.79.1"
      - name: Build Hugo docs (docs-preview.oso.dev)
        env:
          HUGO_SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY_DEV }}
        if: github.event.inputs.url == 'docs-preview.oso.dev'
        run: |
          make ci-preview-docs
        working-directory: docs
      - name: Build Hugo docs (docs.oso.dev)
        env:
          HUGO_SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY_PROD }}
        if: github.event.inputs.url == 'docs.oso.dev'
        run: |
          make ci-prod-docs
        working-directory: docs
      - name: Install s3deploy
        run: |
          wget https://github.com/bep/s3deploy/releases/download/v2.4.0/s3deploy_2.4.0_Linux-64bit.deb
          sudo dpkg -i s3deploy_2.4.0_Linux-64bit.deb

      ### Push to S3 + invalidate cache
      - name: deploy
        run: s3deploy -bucket ${{ github.event.inputs.url }}  -path v/main -source public -region us-east-1
        working-directory: docs
      - name: cloudfront invalidate docs preview
        run: aws cloudfront create-invalidation --distribution-id E2KU2V8C9KJNU7 --paths "/*"
        if: github.event.inputs.url == 'docs-preview.oso.dev'
      - name: cloudfront invalidate docs
        run: aws cloudfront create-invalidation --distribution-id E1MY35FKBOYAV1 --paths "/*"
        if: github.event.inputs.url == 'docs.oso.dev'
