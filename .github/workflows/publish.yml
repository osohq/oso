name: Publish Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version Number"
        required: true
jobs:
  go:
    # Notifies the go-oso repo there's a new release.
    # CI over there then pulls this tag, commits and pushes their own tag.
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_API_TOKEN }}
          repository: osohq/go-oso
          event-type: oso_publish
          client-payload: '{"version": "${{ github.event.inputs.version }}"}'

  java:
    name: Publish java jar to maven repository
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GithubToken: ${{ secrets.GITHUB_TOKEN }}
      GPGPassphrase: ${{ secrets.PASSPHRASE }}
      JiraUser: ${{ secrets.JIRAUSER }}
      JiraPassword: ${{ secrets.JIRAPASSWORD }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "v${{ github.event.inputs.version }}"
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
      - name: GPG user IDs
        run: |
          echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
          echo "name:        ${{ steps.import_gpg.outputs.name }}"
          echo "email:       ${{ steps.import_gpg.outputs.email }}"
      - run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/v${{ github.event.inputs.version }} | jq -r '.assets[] | select(.name == "oso-lib-${{ github.event.inputs.version }}.zip") | .url') --output oso-lib-${{ github.event.inputs.version }}.zip
      - run: unzip oso-lib-${{ github.event.inputs.version }}.zip -d oso-lib-${{ github.event.inputs.version }}
      - uses: actions/setup-java@v1
        with:
          java-version: "10"
      - name: Copy libraries into resources.
        run: |
          mkdir -p languages/java/oso/src/main/resources/linux
          cp -r oso-lib-${{ github.event.inputs.version }}/libpolar.so languages/java/oso/src/main/resources/linux/
          mkdir -p languages/java/oso/src/main/resources/macos
          cp -r oso-lib-${{ github.event.inputs.version }}/libpolar.dylib languages/java/oso/src/main/resources/macos/
          mkdir -p languages/java/oso/src/main/resources/win
          cp -r oso-lib-${{ github.event.inputs.version }}/polar.dll languages/java/oso/src/main/resources/win/
      - run: |
          GPG_TTY=$(tty) mvn -q clean source:jar deploy -DuniqueVersion=false -Dmaven.source.useDefaultManifestFile=true -DdeplyAtEnd=true -Dmaven.source.includePom=true -Dmaven.install.skip=true --settings settings.xml
        working-directory: languages/java/oso
  python:
    name: Publish python package to pypi
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "v${{ github.event.inputs.version }}"
      - run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/v${{ github.event.inputs.version }} | jq -r '.assets[] | select(.name == "oso-python-${{ github.event.inputs.version }}.zip") | .url') --output oso-python-${{ github.event.inputs.version }}.zip
      - run: unzip oso-python-${{ github.event.inputs.version }}.zip -d oso-python-${{ github.event.inputs.version }}
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.7"
      - run: pip install twine
      - run: twine upload oso-python-${{ github.event.inputs.version }}/*.whl --non-interactive
  ruby:
    name: Publish ruby gem to rubygems
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "v${{ github.event.inputs.version }}"
      - run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/v${{ github.event.inputs.version }} | jq -r '.assets[] | select(.name == "oso-ruby-${{ github.event.inputs.version }}.zip") | .url') --output oso-ruby-${{ github.event.inputs.version }}.zip
      - run: unzip oso-ruby-${{ github.event.inputs.version }}.zip -d oso-ruby-${{ github.event.inputs.version }}
      - name: Set up ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"
          working-directory: "languages/ruby"
      - run: gem push oso-oso-${{ github.event.inputs.version }}.gem
        working-directory: "oso-ruby-${{ github.event.inputs.version }}"
  js:
    name: Publish Node.js package to NPM
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "v${{ github.event.inputs.version }}"
      - run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s https://api.github.com/repos/osohq/oso/releases/tags/v${{ github.event.inputs.version }} | jq -r '.assets[] | select(.name == "oso-js-node-${{ github.event.inputs.version }}.tgz") | .url') --output oso-js-node-${{ github.event.inputs.version }}.tgz
      - name: Extract gzipped archive
        run: |
          mkdir -p oso-js-node-${{ github.event.inputs.version }}
          tar -xzf oso-js-node-${{ github.event.inputs.version }}.tgz -C oso-js-node-${{ github.event.inputs.version }} --strip-components=1
      - name: Use Node.js 10.14.2
        uses: actions/setup-node@v1
        with:
          node-version: 10.14.2
      - name: Set up .npmrc
        working-directory: "oso-js-node-${{ github.event.inputs.version }}"
        run: echo '//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}' > .npmrc
      - run: npm publish
        working-directory: "oso-js-node-${{ github.event.inputs.version }}"
  rust:
    name: Publish Rust crates to Crates.io
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: package polar-core
        working-directory: polar-core
        run: cargo publish
      - name: package oso-derive
        working-directory: languages/rust/oso-derive
        run: cargo publish
      - name: Sleep so that oso-derive is available.
        run: sleep 100
      - name: package oso
        working-directory: languages/rust/oso
        run: cargo package
